spring.application.name=kafka-user
server.port=8085
#============== kafka ===================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=192.168.1.7:9092
 
#=============== provider  =======================
spring.kafka.producer.retries=0
# 每次批量发送消息的数量
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
 
# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
 
#=============== consumer  =======================
# 指定默认消费者组id,group id
#spring.kafka.consumer.group-id=user-log-group
spring.kafka.consumer.group-id=test
#Zookeeper主机字符串
spring.kafka.consumer.zookeeper.connect=192.168.1.7:2181
#设置消费者定义的topic
spring.kafka.consumer.topic=test
#当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时,earliest:自动将偏移重置为最早的偏移量,latest :自动将偏移重置为最新的偏移量,
#none：如果没有找到消费者组的先前偏移量，则向消费者抛出异常,anything else：向消费者抛出异常
spring.kafka.consumer.auto-offset-reset=earliest
#消费者是否自动提交，true，则消费者的偏移量将在后台定期提交。
spring.kafka.consumer.enable-auto-commit=true
#消费者偏移自动提交到Kafka的频率
spring.kafka.consumer.auto-commit-interval=100
 
# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer